[{"path":"https://maurolepore.github.io/adm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 adm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://maurolepore.github.io/adm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mauro Lepore. Author, contractor, maintainer.","code":""},{"path":"https://maurolepore.github.io/adm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lepore M (2024). adm: Automatic Data Models. R package version 0.0.0.9003, https://maurolepore.github.io/adm/, https://github.com/maurolepore/adm.","code":"@Manual{,   title = {adm: Automatic Data Models},   author = {Mauro Lepore},   year = {2024},   note = {R package version 0.0.0.9003,     https://maurolepore.github.io/adm/},   url = {https://github.com/maurolepore/adm}, }"},{"path":"https://maurolepore.github.io/adm/index.html","id":"adm","dir":"","previous_headings":"","what":"Automatic Data Models","title":"Automatic Data Models","text":"goal adm provide automated tools work data models. ’s enabled lightweight convention top dm package. data model must follow two rules: table, primary key name table prefix _id. example table x primary key named x_id. _id column exists table name different prefix _id column, column foreign key linking another table. example, table x_id, column y_id foreign key linking table y.","code":""},{"path":"https://maurolepore.github.io/adm/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automatic Data Models","text":"can install development version adm GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"maurolepore/adm\")"},{"path":"https://maurolepore.github.io/adm/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Automatic Data Models","text":"Consider data model. table column names follow three rules , data model key yet. adm::add_keys() adds primary foreign keys. adm::flatten_linked_tables() flattens linked tables single one. Unlinked tables excluded way join .","code":"library(dm, warn.conflicts = FALSE) library(adm) adm_example <- adm_demo() # Removing keys to show how to add them dm <- dm(!!!as.list(adm_example)) dm #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `a`, `a_b`, `b`, `b_c`, `c`, … (7 total) #> Columns: 17 #> Primary keys: 0 #> Foreign keys: 0 adm <- dm %>% add_keys() adm #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `a`, `a_b`, `b`, `b_c`, `c`, … (7 total) #> Columns: 17 #> Primary keys: 7 #> Foreign keys: 5  adm %>% dm_draw() adm %>% flatten_linked_tables() #> Warning: Unlinked tables: e #> Joining with `by = join_by(b_id)` #> Joining with `by = join_by(c_id)` #> Joining with `by = join_by(a_id)` #> Joining with `by = join_by(b_id)` #> Joining with `by = join_by(d_id)` #> # A tibble: 1 × 10 #>    a_id     a a_b_id  b_id     b b_c_id  c_id     c  d_id     d #>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1     1     1      1     1     1      1     1     1     1     1"},{"path":"https://maurolepore.github.io/adm/index.html","id":"without-adm","dir":"","previous_headings":"Example","what":"Without adm","title":"Automatic Data Models","text":"can directly dm package, complex data models ’s hard work. Add primary foreign keys. Flatten linked tables single one.","code":"dm2 <- dm %>%   dm_add_pk(a, a_id) %>%   dm_add_pk(a_b, a_b_id) %>%   dm_add_pk(b, b_id) %>%   dm_add_pk(b_c, b_c_id) %>%   dm_add_pk(c, c_id) %>%   dm_add_pk(d, d_id) %>%   dm_add_pk(e, e_id) %>%   dm_add_fk(a_b, a_id, a) %>%   dm_add_fk(a_b, b_id, b) %>%   dm_add_fk(b_c, b_id, b) %>%   dm_add_fk(b_c, c_id, c) %>%   dm_add_fk(c, d_id, d) dm2 #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `a`, `a_b`, `b`, `b_c`, `c`, … (7 total) #> Columns: 17 #> Primary keys: 7 #> Foreign keys: 5  dm2 %>% dm_draw() flat1 <- dm2 %>% dm_flatten_to_tbl(.start = a_b) flat2 <- dm2 %>% dm_flatten_to_tbl(.start = b_c, .recursive = TRUE) left_join(flat1, flat2) #> Joining with `by = join_by(b_id, b)` #> # A tibble: 1 × 10 #>   a_b_id  a_id  b_id     a     b b_c_id  c_id     c  d_id     d #>    <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1      1     1     1     1     1      1     1     1     1     1"},{"path":"https://maurolepore.github.io/adm/reference/add_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Add primary and foreign keys automatically — add_keys","title":"Add primary and foreign keys automatically — add_keys","text":"function adds primary foreign keys 'dm' object automatically, assuming names tables keys follow rules: table, primary key name table prefix _id. example table x primary key named x_id. _id column exists table name different prefix _id, column foreign key linking another table. example, table x_id, column y_id foreign key linking table y.","code":""},{"path":"https://maurolepore.github.io/adm/reference/add_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add primary and foreign keys automatically — add_keys","text":"","code":"add_keys(dm)"},{"path":"https://maurolepore.github.io/adm/reference/add_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add primary and foreign keys automatically — add_keys","text":"dm dm object.","code":""},{"path":"https://maurolepore.github.io/adm/reference/add_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add primary and foreign keys automatically — add_keys","text":"updated dm primary foreign key relations.","code":""},{"path":"https://maurolepore.github.io/adm/reference/add_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add primary and foreign keys automatically — add_keys","text":"","code":"dm <- dm::dm(x = data.frame(x_id = 1, y_id = 2), y = data.frame(y_id = 2)) add_keys(dm) #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `x`, `y` #> Columns: 3 #> Primary keys: 2 #> Foreign keys: 1"},{"path":"https://maurolepore.github.io/adm/reference/adm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"adm: Automatic Data Models — adm-package","title":"adm: Automatic Data Models — adm-package","text":"Create data models, adding primary foreign keys automatically names tables key columns.","code":""},{"path":[]},{"path":"https://maurolepore.github.io/adm/reference/adm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"adm: Automatic Data Models — adm-package","text":"Maintainer: Mauro Lepore maurolepore@gmail.com (ORCID) [contractor]","code":""},{"path":"https://maurolepore.github.io/adm/reference/adm_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"A toy data model — adm_demo","title":"A toy data model — adm_demo","text":"toy data model","code":""},{"path":"https://maurolepore.github.io/adm/reference/adm_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A toy data model — adm_demo","text":"","code":"adm_demo()"},{"path":"https://maurolepore.github.io/adm/reference/adm_demo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A toy data model — adm_demo","text":"dm.","code":""},{"path":"https://maurolepore.github.io/adm/reference/adm_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A toy data model — adm_demo","text":"","code":"adm_demo() #> ── Metadata ──────────────────────────────────────────────────────────────────── #> Tables: `a`, `a_b`, `b`, `b_c`, `c`, … (7 total) #> Columns: 17 #> Primary keys: 7 #> Foreign keys: 5"},{"path":"https://maurolepore.github.io/adm/reference/flatten_linked_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a data model — flatten_linked_tables","title":"Flatten a data model — flatten_linked_tables","text":"Flatten data model","code":""},{"path":"https://maurolepore.github.io/adm/reference/flatten_linked_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a data model — flatten_linked_tables","text":"","code":"flatten_linked_tables(dm, .join = dplyr::left_join)"},{"path":"https://maurolepore.github.io/adm/reference/flatten_linked_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a data model — flatten_linked_tables","text":"dm dm object. .join type join performed, see dplyr::join().","code":""},{"path":"https://maurolepore.github.io/adm/reference/flatten_linked_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a data model — flatten_linked_tables","text":"single table results consecutively joining linked tables.","code":""},{"path":"https://maurolepore.github.io/adm/reference/flatten_linked_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a data model — flatten_linked_tables","text":"","code":"library(dm) #>  #> Attaching package: ‘dm’ #> The following object is masked from ‘package:stats’: #>  #>     filter  dm <- adm_demo() dm %>% flatten_linked_tables() #> Warning: Unlinked tables: e #> Joining with `by = join_by(b_id)` #> Joining with `by = join_by(c_id)` #> Joining with `by = join_by(a_id)` #> Joining with `by = join_by(b_id)` #> Joining with `by = join_by(d_id)` #> # A tibble: 1 × 10 #>    a_id     a a_b_id  b_id     b b_c_id  c_id     c  d_id     d #>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1     1     1      1     1     1      1     1     1     1     1  dm %>%   dm_select_tbl(a, b, a_b) %>%   flatten_linked_tables() #> Joining with `by = join_by(a_id)` #> Joining with `by = join_by(b_id)` #> # A tibble: 1 × 5 #>    a_id     a  b_id     b a_b_id #>   <dbl> <dbl> <dbl> <dbl>  <dbl> #> 1     1     1     1     1      1"},{"path":"https://maurolepore.github.io/adm/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://maurolepore.github.io/adm/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://maurolepore.github.io/adm/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://maurolepore.github.io/adm/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://maurolepore.github.io/adm/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://maurolepore.github.io/adm/news/index.html","id":"adm-0009003","dir":"Changelog","previous_headings":"","what":"adm 0.0.0.9003","title":"adm 0.0.0.9003","text":"Add website","code":""},{"path":"https://maurolepore.github.io/adm/news/index.html","id":"adm-0009002","dir":"Changelog","previous_headings":"","what":"adm 0.0.0.9002","title":"adm 0.0.0.9002","text":"Upkeep R CMD check workflow.","code":""},{"path":"https://maurolepore.github.io/adm/news/index.html","id":"adm-0009000","dir":"Changelog","previous_headings":"","what":"adm 0.0.0.9000","title":"adm 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
